<apex:page docType="html-5.0" controller="IncomeNew" title="Income" 
    sidebar="false" showHeader="true" standardStylesheets="false" cache="true"  >
<!-- <apex:page docType="html-5.0" sidebar="false" showHeader="false"  standardStylesheets="false" cache="true" controller="Income" > -->
    <html>
<head>
    <!--<meta name="viewport" content="width=device-width, initial-scale=1.0"></meta> !-->
    <!--<meta charset="utf-8" /> !-->
</head>
<apex:form >
    <apex:pageBlock id="incomPage" title="Income">
        <table width="100%;">
            <tr>
                <td style="padding: .3em;"><apex:image height="56"
                        value="{!currentUser.SmallPhotoUrl}" /></td>

                <td style="width: 100%; padding: .3em;"><span
                    style="display: block;">{!currentUser.Name}</span> <span
                    style="display: block;">{!currentUser.EmployeeCode__c}</span> 

                    <span style="font-weight: bold;" Id="callStatus"></span>
                    <span style="font-weight: bold;" class="regStatus"></span> 
                    <span style="margin-left: 1em;" class="callStatus"></span></td>


                <td
                    style="border-bottom: 0px solid #ddd; text-align: center; vertical-align: middle">
                    <span style="display: block;" id ='btnCall'><a href="#"
                        class="callConnectEveryoneLink" onClick='callDirection();'
                        id="callConnectEveryoneLink "><img height="56" id='callImage'
                            src="{!$Resource.callending}" /></a></span>
                </td>
              <!--  <td
                    style="border-bottom: 0px solid #ddd; text-align: center; vertical-align: middle">
                    <span style="display: block;"> <a href="#"
                        class="callEndEveryoneLink" onClick='sipHangUp();'
                        id="callEndEveryoneLink"><img height="56"
                            src="{!$Resource.callending}" /></a></span>
                </td> -->
               
               <!-- <td
                    style="border-bottom: 0px solid #ddd; text-align: center; vertical-align: middle">
                    <span style="display: block;"> <a href="#"
                        class="callMuteEveryoneLink" id="callMuteEveryoneLink"
                        onClick='sipToggleMute();'><img height="56"
                            src="{!$Resource.unmutecall}" /></a></span>
                </td> -->
                <td
                    style="border-bottom: 0px solid #ddd; text-align: center; vertical-align: middle">
                    <span style="display: block;"><a href="#"
                        class="callUnMuteEveryoneLink" id="callUnMuteEveryoneLink"
                        onClick='sipToggleMute();'><img id = 'mute' height="56"
                            src="{!$Resource.mutecall}" /></a></span>
                </td>
            </tr>
            <td>
            <span style="color:red;" id="error" ></span>
            <br/>
            <span id="red"
                style="border-radius: 50%; display: inline-block; height: 10px; margin-left: 8px; width: 10px; background: rgb(255, 0, 0);"></span>
                <span id="orange"
                style="border-radius: 50%; visibility: hidden; display: inline-block; height: 10px; margin-left: 8px; width: 10px; background: rgb(255, 165, 0);"></span>
                <span id="green"
                style="border-radius: 50%; visibility: hidden; display: inline-block; height: 10px; margin-left: 8px; width: 10px; background: rgb(66, 183, 42);"></span>

            </td>
        </table>
        <br />
        </apex:pageblock>
</apex:form>

<apex:include pageName="IncomeOnlineUsersNew" />
<apex:form >
    <apex:pageBlock >
        <br>
        </br>
        <div class="panel panel-default">
            <apex:actionFunction name="callcontroller" action="{!singleMessage}"
                reRender="PBS1">
                <apex:param value="" name="id" assignTo="{!userId}" />
                <apex:param value="" name="message" assignTo="{!msg}" />
            </apex:actionFunction>
            <apex:actionFunction name="changeOnlineStatus"
                action="{!updateUserStatus}" reRender="PBS1">
            </apex:actionFunction>
            <apex:actionFunction name="disconnect" action="{!disconnect}"
                reRender="PBS1">
            </apex:actionFunction>
            <apex:actionFunction action="{!PostToChatter}" name="setScreenResln"
                reRender="PBS1">
                <apex:param name="p1" value="" assignTo="{!msg}" />
            </apex:actionFunction>
        </div>
        <br />
    </apex:pageBlock>
</apex:form>

<audio id="audio_remote" autoplay="autoplay">
</audio>
<audio id="ringTone" loop="true" src="{!$Resource.ringtone}"></audio>
<audio id="ringBackTone" loop="true" src="{!$Resource.ringbacktone}"></audio>



<script type='text/javascript'>


    var erroMessage;
    var isMute = false;
    var isTimer = false;
    var oSipStack, oSipSessionRegister, oSipSessionCall, oSipSessionTransferCall;
    var audioRemote;
    var bFullScreen = false;
    var oNotifICall;
    var bDisableVideo = false;
    var viewVideoLocal, viewVideoRemote, viewLocalScreencast; // <video> (webrtc) or <div> (webrtc4all)
    var oConfigCall;
    var oReadyStateTimer;
    var isEnabled = 0;


    
    // 2018/03/07 Security Check BEGIN
    var displayName = '{!JSENCODE(currentUser.Display_Name__c)}';
    // 2018/03/07 Security Check END
//    var realm = '{!asterisk.Realm__c}';
    //var realm = '54.64.141.227';
    var realm = '54.238.145.18';

    //var realm = 'ap.force.com';
    
    // 2018/03/07 Security Check BEGIN
    var privateIdentity = '{!JSENCODE(currentUser.AsteriskExtension__c)}';
    // 2018/03/07 Security Check END
    var publicIdentity = "sip:" + privateIdentity + "@" + realm;
    //var serverIP_and_port = 'WSS 150'//'{!asterisk.Name}';
    // 2018/03/07 Security Check BEGIN
    var password = '{!JSENCODE(currentUser.AsteriskPassword__c)}';
    // 2018/03/07 Security Check END

    //var password = '123456';

    //var phoneNumber = '121'
    var phoneNumber = '1000';
   // var websocketServerUrl = '{!asterisk.WebSocket_Server_URL__c}';
   //var websocketServerUrl = 'wss://jinya.innovaturetech.com:8089/ws'

    //var websocketServerUrl = 'wss://52.198.65.63:8089/ws'
    

    var callEndEveryoneLink, callConnectEveryoneLink;
    
    
    window.addEventListener("beforeunload", function(e)
    {        
         disconnect();
    }
    );

    
    document
            .addEventListener(
                    'DOMContentLoaded',
                    function() {

                        window.console
                                && window.console.info
                                && window.console.info("location="
                                        + window.location);
                                        
                        
                        
                                          
                        errorMessage = document.getElementById('error');
                        errorMessage.style.visibility = "hidden";   
                        //  videoRemote = document.getElementById("video_remote");
                        audioRemote = document.getElementById("audio_remote");

                        document.onkeyup = onKeyUp;
                        document.body.onkeyup = onKeyUp;

                        // set debug level
                        SIPml
                                .setDebugLevel((window.localStorage && window.localStorage
                                        .getItem('org.doubango.expert.disable_debug') == "true") ? "error"
                                        : "info");

                        // Initialize call button
                        // uiBtnCallSetText("Call");
                        
                        var getPVal = function(PName) {

                            var query = window.location.search.substring(1);
                            var vars = query.split('&');
                            for (var i = 0; i < vars.length; i++) {
                                var pair = vars[i].split('=');
                                if (decodeURIComponent(pair[0]) === PName) {
                                    return decodeURIComponent(pair[1]);
                                }
                            }
                            return null;
                        }

                        var preInit = function() {   
                            console.log('inside preInit:199');
                            // set default webrtc type (before initialization)                   
                            var s_webrtc_type = getPVal("wt");
                            var s_fps = getPVal("fps");
                            var s_mvs = getPVal("mvs"); // maxVideoSize
                            var s_mbwu = getPVal("mbwu"); // maxBandwidthUp (kbps)
                            var s_mbwd = getPVal("mbwd"); // maxBandwidthUp (kbps)
                            var s_za = getPVal("za"); // ZeroArtifacts
                            var s_ndb = getPVal("ndb"); // NativeDebug

                            if (s_webrtc_type)
                                SIPml.setWebRtcType(s_webrtc_type);

                            // initialize SIPML5
                            SIPml.init(sipPostInit);

                            // set other options after initialization
                            if (s_fps)
                                SIPml.setFps(parseFloat(s_fps));
                            if (s_mvs)
                                SIPml.setMaxVideoSize(s_mvs);
                            if (s_mbwu)
                                SIPml.setMaxBandwidthUp(parseFloat(s_mbwu));
                            if (s_mbwd)
                                SIPml.setMaxBandwidthDown(parseFloat(s_mbwd));
                            if (s_za)
                                SIPml.setZeroArtifacts(s_za === "true");
                            if (s_ndb == "true")
                                SIPml.startNativeDebug();
                        }
                    

                        oReadyStateTimer = setInterval(function() { 

                            if (document.readyState === "complete") {
                                clearInterval(oReadyStateTimer);
                                // initialize SIPML5  
                                preInit();
                                sipRegister();
                                startTimer();                                

                            }
                        },500);    

                        displayUsersStyle();                                    
                    
                    }
            );       


        function displayUsersStyle()
        {
            var content;   

            var table = document.getElementById("offlineUserTable");

            for (var i = 0, row; row = table.rows[i]; i++) {

                var celLen = row.cells.length ; 

                content = '<table width="100%" cellspacing="10"> <tbody> <tr width="100%" style="background-color: #fff; display: inline-flex;">' ;
               
               for (var j = 1, col; col = row.cells[j]; j++) {
               
                 var mod = j % 8;             

                 if( celLen > 0 && mod == 1)
                 {               
                    content = content + '</tr> <tr> <td style="border-bottom: 1px solid #ddd;" >' + col.innerHTML + '</td>';                     
                 }      
                 else
                 {
                    content = content + '<td style="border-bottom: 1px solid #ddd;" >' + col.innerHTML + '</td>';
                 }
               }                    
            }

            content = content + '</tr> </table>';

            //document.write(content);                    

            table.innerHTML = content;  
    }   
  

   

    function changeOnlineColor(color) {
        switch (color) {
        case 'red': {            
            document.getElementById('red').style.visibility = "visible";
            document.getElementById('orange').style.visibility = "hidden";
            document.getElementById('callStatus').innerHTML = "Status: Not Connected";
            document.getElementById('green').style.visibility = "hidden";
            break;
        }
        case 'green': { 
            document.getElementById('callStatus').innerHTML = "Status: Connected";
            document.getElementById('red').style.visibility = "hidden";
            document.getElementById('orange').style.visibility = "hidden";
            document.getElementById('green').style.visibility = "visible";
            break;
        }
        case 'orange': {
            document.getElementById('callStatus').innerHTML = "Status: Connecting";
            document.getElementById('red').style.visibility = "hidden";
            document.getElementById('orange').style.visibility = "visible";
            document.getElementById('green').style.visibility = "hidden";
            break;
        }

        }

    }

    function showOfflineStatus() {    
        console.log('Inside showOfflineStatus');
      errorMessage.innerHTML = '';
     errorMessage.style.visibility = "hidden";
                    oSipSessionCall = null;
                    oSipSessionRegister = null;
        if (oSipStack && !oSipSessionCall
                && !tsk_string_is_null_or_empty(phoneNumber)) {
            document.getElementById('red').style.visibility = "hidden";
            document.getElementById('orange').style.visibility = "visible";
            document.getElementById('callStatus').innerHTML = "Status: Connecting";
            document.getElementById('green').style.visibility = "hidden";
        } else {
            document.getElementById('red').style.visibility = "visible";
            document.getElementById('orange').style.visibility = "hidden";
            document.getElementById('callStatus').innerHTML = "Status: Not Connected";
            document.getElementById('green').style.visibility = "hidden";
        }
        isEnabled = 2;
        document.getElementById('callImage').src = '{!$Resource.callinggreen}'; 


    }

    function notifyAll() {
        var message = prompt("Enter Text Here ");
        if (message) {
            setScreenResln(message);
        }
    }
    function singleMessage(id) {
        var message = prompt("Enter Text Here ");
        if (message) {
            callcontroller(id, message);
        }
    }

    function changeStatus() {
        console.log('inside changeStatus');
     errorMessage.innerHTML = '';
     errorMessage.style.visibility = "hidden";
        console.log('inside changeStatus calling changeOnlineStatus-> updateUserStatus');
        changeOnlineStatus();
        changeOnlineColor('green');
        isEnabled = 1;

        document.getElementById('callImage').src = '{!$Resource.callending}'; 
        document.getElementById('callStatus').innerHTML = "Status: Connected";
        
        // location.reload();
    }

    function sipPostInit() {

        console.log('inside sipPostInit');// check for WebRTC support
        if (!SIPml.isWebRtcSupported()) {
            // is it chrome?
            if (SIPml.getNavigatorFriendlyName() == 'chrome') {
                if (confirm("You're using an old Chrome version or WebRTC is not enabled.\nDo you want to see how to enable WebRTC?")) {
                    window.location = 'http://www.webrtc.org/running-the-demos';
                } else {
                    window.location = "index.html";
                }
                return;
            } else {
                if (confirm("webrtc-everywhere extension is not installed. Do you want to install it?\nIMPORTANT: You must restart your browser after the installation.")) {
                    window.location = 'https://github.com/sarandogou/webrtc-everywhere';
                } else {
                    // Must do nothing: give the user the chance to accept the extension
                    // window.location = "index.html";
                }
            }
        }

        // checks for WebSocket support
        if (!SIPml.isWebSocketSupported()) {

            if (confirm('Your browser don\'t support WebSockets.\nDo you want to download a WebSocket-capable browser?')) {
                window.location = 'https://www.google.com/intl/en/chrome/browser/';
            } else {
                window.location = "index.html";
            }
            return;
        }

       

        if (!SIPml.isWebRtcSupported()) {
            if (confirm('Your browser don\'t support WebRTC.\naudio/video calls will be disabled.\nDo you want to download a WebRTC-capable browser?')) {
                window.location = 'https://www.google.com/intl/en/chrome/browser/';
            }
        }

        //btnRegister.disabled = false;
        //document.body.style.cursor = 'default';
        oConfigCall = {
            audio_remote : audioRemote,
            //    video_local: viewVideoLocal,
            //    video_remote: viewVideoRemote,
            //    screencast_window_id: 0x00000000, // entire desktop
            //    bandwidth: { audio: undefined, video: undefined },
            //    video_size: { minWidth: undefined, minHeight: undefined, maxWidth: undefined, maxHeight: undefined },
            events_listener : {
                events : '*',
                listener : onSipEventSession
            },
            sip_caps : [ {
                name : '+g.oma.sip-im'
            }, {
                name : 'language',
                value : '\"en,fr\"'
            } ]
        };
    }

    function loadCredentials() {
        if (window.localStorage) {

            // IE retuns 'null' if not defined
            var s_value;
            if ((s_value = window.localStorage
                    .getItem('org.doubango.identity.display_name')))
                displayName = s_value;
            if ((s_value = window.localStorage
                    .getItem('org.doubango.identity.impi')))
                privateIdentity = s_value;
            if ((s_value = window.localStorage
                    .getItem('org.doubango.identity.impu')))
                publicIdentity = s_value;
            if ((s_value = window.localStorage
                    .getItem('org.doubango.identity.password')))
                password = s_value;
            if ((s_value = window.localStorage
                    .getItem('org.doubango.identity.realm')))
                realm = s_value;
        } else {

            //displayName = "005";
            //privateIdentity = "005";
            //publicIdentity = "sip:005@sip2sip.info";
            //password = "005";
            //realm = "sip2sip.info";
            //phoneNumber = "701020";
        }
    };

    function onKeyUp(evt) {
        evt = (evt || window.event);
        if (evt.keyCode == 27) {
            fullScreen(false);
        } else if (evt.ctrlKey && evt.shiftKey) { // CTRL + SHIFT
            if (evt.keyCode == 65 || evt.keyCode == 86) { // A (65) or V (86)
                bDisableVideo = (evt.keyCode == 65);
                //txtCallStatus.innerHTML = '<i>Video ' + (bDisableVideo ? 'disabled' : 'enabled') + '</i>';
                window.localStorage.setItem(
                        'org.doubango.expert.disable_video', bDisableVideo);
            }
        }
    }

    // sends SIP REGISTER request to login
    function sipRegister() {
        console.log('Inside sipRegister');
        // catch exception for IE (DOM not ready)
        try { 

            //callConnectEveryoneLink.disabled = true;

            if (!realm || !privateIdentity || !publicIdentity) {

                // errorMessage.innerHTML = '<b>Please fill madatory fields (*)</b>';
                //errorMessage.style.visibility = "visible";
                // callConnectEveryoneLink.disabled = false;
                return;
            }
            var o_impu = tsip_uri.prototype.Parse(publicIdentity);
            if (!o_impu || !o_impu.s_user_name || !o_impu.s_host) {

                errorMessage.innerHTML = "<b>Not a valid Public identity</b>";
                errorMessage.style.visibility = "visible";

                //  callConnectEveryoneLink.disabled = false;
                return;
            }

            // enable notifications if not already done
            if (window.webkitNotifications
                    && window.webkitNotifications.checkPermission() != 0) {

                window.webkitNotifications.requestPermission();
            }

            // save credentials
            //saveCredentials();

            // update debug level to be sure new values will be used if the user havent updated the page

            SIPml
                    .setDebugLevel((window.localStorage && window.localStorage
                            .getItem('org.doubango.expert.disable_debug') == "true") ? "error"
                            : "info");

            /* window.localStorage.setItem('org.doubango.identity.display_name', displayName);
                         window.localStorage.setItem('org.doubango.identity.impi', privateIdentity);
                         window.localStorage.setItem('org.doubango.identity.impu', publicIdentity);
                         window.localStorage.setItem('org.doubango.identity.password', password);
                         window.localStorage.setItem('org.doubango.identity.realm', realm);
                         window.localStorage.setItem('org.doubango.expert.websocket_server_url', websocketServerUrl);*/
            //   websocket_proxy_url: (window.localStorage ? window.localStorage.getItem('org.doubango.expert.websocket_server_url') : null),
            oSipStack = new SIPml.Stack(
                    {
                        realm : realm,
                        impi : privateIdentity,
                        impu : publicIdentity,
                        password : password,
                        display_name : displayName,
                        //websocket_proxy_url : websocketServerUrl,

                        outbound_proxy_url : (window.localStorage ? window.localStorage
                                .getItem('org.doubango.expert.sip_outboundproxy_url')
                                : null),
                        ice_servers : (window.localStorage ? window.localStorage
                                .getItem('org.doubango.expert.ice_servers')
                                : null),
                        enable_rtcweb_breaker : (window.localStorage ? window.localStorage
                                .getItem('org.doubango.expert.enable_rtcweb_breaker') == "true"
                                : false),
                        events_listener : {
                            events : '*',
                            listener : onSipEventStack
                        },
                        enable_early_ims : (window.localStorage ? window.localStorage
                                .getItem('org.doubango.expert.disable_early_ims') != "true"
                                : true), // Must be true unless you are using a real IMS network
                        enable_media_stream_cache : (window.localStorage ? window.localStorage
                                .getItem('org.doubango.expert.enable_media_caching') == "true"
                                : false),
                        bandwidth : (window.localStorage ? tsk_string_to_object(window.localStorage
                                .getItem('org.doubango.expert.video_size'))
                                : null), // could be redefined a session-level
                        video_size : (window.localStorage ? tsk_string_to_object(window.localStorage
                                .getItem('org.doubango.expert.video_size'))
                                : null), // could be redefined a session-level
                        sip_headers : [ {
                            name : 'User-Agent',
                            value : 'IM-client/OMA1.0 sipML5-v1.2016.03.04'
                        }, {
                            name : 'Organization',
                            value : 'Jinya Salesforce Project Sample'
                        } ]
                    }

            );

            if (oSipStack.start() != 0) {

                document.getElementById('callStatus').innerHTML = "Status: Not Connected";
                errorMessage.innerHTML = '<b>Failed to start Connection</b>';
                errorMessage.style.visibility = "visible";   
            } else {
                document.getElementById('callStatus').innerHTML = "Status: Connecting";
                changeOnlineColor('orange');
                // Call while loading the page
                sipCall("call-audio");
                return;
            }
        } catch (e) {

            errorMessage.innerHTML = "<b>2:" + 'Connection Error' + "</b>";
            errorMessage.style.visibility = "visible";
        }
        //  callConnectEveryoneLink.disabled = false;

    }

    // sends SIP REGISTER (expires=0) to logout
    function sipUnRegister() {
        if (oSipStack) {
            oSipStack.stop(); // shutdown all sessions
        }
    }

    // makes a call (SIP INVITE)
    function sipCall(s_type) {
        console.log('Inside sipCall');
        if (oSipStack && !oSipSessionCall
                && !tsk_string_is_null_or_empty(phoneNumber)) {

            if (s_type == 'call-screenshare') {
                if (!SIPml.isScreenShareSupported()) {
                    alert('Screen sharing not supported. Are you using chrome 26+?');
                    return;
                }
                if (!location.protocol.match('https')) {
                    if (confirm("Screen sharing requires https://. Do you want to be redirected?")) {
                        sipUnRegister();
                        window.location = 'https://ns313841.ovh.net/call.htm';
                    }
                    return;
                }
            }
            //btnCall.disabled = true;
            //btnHangUp.disabled = false;

            if (window.localStorage) {

                //window.localStorage.setItem('org.doubango.expert.bandwidth','64');
                //                window.localStorage.setItem('org.doubango.expert.video_size','512');
                oConfigCall.bandwidth = tsk_string_to_object(window.localStorage
                        .getItem('org.doubango.expert.bandwidth')); // already defined at stack-level but redifined to use latest values
                oConfigCall.video_size = tsk_string_to_object(window.localStorage
                        .getItem('org.doubango.expert.video_size')); // already defined at stack-level but redifined to use latest values

            }

            // create call session
            oSipSessionCall = oSipStack.newSession(s_type, oConfigCall);
            // make call
            if (oSipSessionCall.call(phoneNumber) != 0) {
                oSipSessionCall = null;
                //txtCallStatus.value = 'Failed to make call';
                //btnCall.disabled = false;
                //btnHangUp.disabled = true;
                return;
            }
            saveCallOptions();
        } else if (oSipSessionCall) {
            //txtCallStatus.innerHTML = '<i>Connecting...</i>';

            oSipSessionCall.accept(oConfigCall);
        }
    }

    // terminates the call (SIP BYE or CANCEL)
    function sipHangUp() {
        console.log('Inside sipHangUp');
        if (oSipSessionCall) {
            //txtCallStatus.innerHTML = '<i>Terminating the call...</i>';
            oSipSessionCall.hangup({
                events_listener : {
                    events : '*',
                    listener : onSipEventSession
                }
            });
        }
    }

   

    function startRingTone() {
        try {
            ringtone.play();
        } catch (e) {
        }
    }

    function stopRingTone() {
        try {
            ringtone.pause();
        } catch (e) {
        }
    }

    function startRingbackTone() {
        try {
            ringbacktone.play();
        } catch (e) {
        }
    }

    function stopRingbackTone() {
        try {
            ringbacktone.pause();
        } catch (e) {
        }
    }

    function showNotifICall(s_number) {
        // permission already asked when we registered
        if (window.webkitNotifications
                && window.webkitNotifications.checkPermission() == 0) {
            if (oNotifICall) {
                oNotifICall.cancel();
            }
            oNotifICall = window.webkitNotifications.createNotification(
                    'images/sipml-34x39.png', 'Incaming call',
                    'Incoming call from ' + s_number);
            oNotifICall.onclose = function() {
                oNotifICall = null;
            };
            oNotifICall.show();
        }
    }

    // Callback function for SIP Stacks
    function onSipEventStack(e /*SIPml.Stack.Event*/) {
        console.log('inside onSipEventStack');
        tsk_utils_log_info('==stack event = ' + e.type);

        switch (e.type) {
        case 'started': {

            // catch exception for IE (DOM not ready)
            try {
                // LogIn (REGISTER) as soon as the stack finish starting
                oSipSessionRegister = this.newSession('register', {
                    expires : 200,
                    events_listener : {
                        events : '*',
                        listener : onSipEventSession
                    },
                    sip_caps : [ {
                        name : '+g.oma.sip-im',
                        value : null
                    },
                    //{ name: '+sip.ice' }, // rfc5768: FIXME doesnt work with Polycom TelePresence
                    {
                        name : '+audio',
                        value : null
                    }, {
                        name : 'language',
                        value : '\"en,fr\"'
                    } ]
                });
                oSipSessionRegister.register();
            } catch (e) {
            errorMessage.innerHTML = "<b>1:" + 'Connection Error' + "</b>";
            errorMessage.style.visibility = "visible";
                

            }
            sipCall("call-audio");
            break;
        }
        case 'stopping':
        case 'stopped':
        case 'failed_to_start':
        case 'failed_to_stop': {
            var bFailure = (e.type == 'failed_to_start')
                    || (e.type == 'failed_to_stop');
            oSipStack = null;
            oSipSessionRegister = null;
            oSipSessionCall = null;

            // uiOnConnectionEvent(false, false);

            stopRingbackTone();
            stopRingTone();
            
            errorMessage.innerHTML = '';
            errorMessage.innerHTML = bFailure ? "<i>Disconnected: <b>" + e.description + "</b></i>" : "<i>Disconnected</i>";
            errorMessage.style.visibility = "visible";
            
            divCallOptions.style.opacity = 0;
            break;
        }

        case 'i_new_call': {
            if (oSipSessionCall) {
                // do not accept the incoming call if we're already 'in call'
                e.newSession.hangup(); // comment this line for multi-line support
            } else {
                oSipSessionCall = e.newSession;
                // start listening for events
                oSipSessionCall.setConfiguration(oConfigCall);

                //uiBtnCallSetText('Answer');
                //btnHangUp.value = 'Reject';
                //btnCall.disabled = false;
                //btnHangUp.disabled = false;

                startRingTone();

                var sRemoteNumber = (oSipSessionCall.getRemoteFriendlyName() || 'unknown');
                //txtCallStatus.innerHTML = "<i>Incoming call from [<b>" + sRemoteNumber + "</b>]</i>";
                showNotifICall(sRemoteNumber);
            }
            break;
        }

        case 'm_permission_requested': {
            //divGlassPanel.style.visibility = 'visible';
            break;
        }
        case 'm_permission_accepted':
        case 'm_permission_refused': {
            //divGlassPanel.style.visibility = 'hidden';
            if (e.type == 'm_permission_refused') {
                uiCallTerminated('Media stream permission denied');
            }
            break;
        }

        case 'starting':
        default:
            break;
        }
    };

    // Callback function for SIP sessions (INVITE, REGISTER, MESSAGE...)
    function onSipEventSession(e) {/* SIPml.Session.Event */
        console.log('inside onSipEventSession e.type: '+e.type);
        tsk_utils_log_info('==session event = ' + e.type);

        switch (e.type) {
        case 'connecting':
        case 'connected': {

            var bConnected = (e.type == 'connected');
            test();

            if (e.session == oSipSessionRegister) {
                // uiOnConnectionEvent(bConnected, !bConnected);
               // errorMessage.innerHTML = "<i>" + e.description + "</i>";
               // errorMessage.style.visibility = "visible";
            } else if (e.session == oSipSessionCall) {
            
                if (window.btnBFCP)
                    window.btnBFCP.disabled = false;

                if (bConnected) {

                    stopRingbackTone();
                    stopRingTone();

                    if (oNotifICall) {
                        oNotifICall.cancel();
                        oNotifICall = null;
                    }

                }

                //  txtCallStatus.innerHTML = "<i>" + e.description + "</i>";
                //  divCallOptions.style.opacity = bConnected ? 1 : 0;

                if (SIPml.isWebRtc4AllSupported()) { // IE don't provide stream callback
                    uiVideoDisplayEvent(false, true);
                    uiVideoDisplayEvent(true, true);
                }
            }
            break;
        } // 'connecting' | 'connected'
        case 'terminating':
        case 'terminated': {
            if (e.session == oSipSessionRegister) {

                tsk_utils_have_webrtc();
                tsk_utils_have_stream()
                uiOnConnectionEvent(false, false);

                //errorMessage.innerHTML = "<i>" + e.description + "</i>";
                //errorMessage.style.visibility = "visible";
            } else if (e.session == oSipSessionCall) {
                if (e.type === 'terminated') {
                    
                    disconnect();
                    showOfflineStatus();
                    uiCallTerminated(e.description);
                }

            }
            break;
        } // 'terminating' | 'terminated'

        case 'm_stream_video_local_added': {
            if (e.session == oSipSessionCall) {
                uiVideoDisplayEvent(true, true);
            }
            break;
        }
        case 'm_stream_video_local_removed': {
            if (e.session == oSipSessionCall) {
                uiVideoDisplayEvent(true, false);
            }
            break;
        }
        case 'm_stream_video_remote_added': {
            if (e.session == oSipSessionCall) {
                uiVideoDisplayEvent(false, true);
            }
            break;
        }
        case 'm_stream_video_remote_removed': {
            if (e.session == oSipSessionCall) {
                uiVideoDisplayEvent(false, false);
            }
            break;
        }

        case 'm_stream_audio_local_added':
        case 'm_stream_audio_local_removed':{
       
            disconnect();
            showOfflineStatus();
            break;

        }
        break;
        case 'm_stream_audio_remote_added':{
            console.log('calling changeStatus from sw-case of onSipEventSession');
             changeStatus();
             break;
        }
        case 'm_stream_audio_remote_removed': {
            disconnect();
            showOfflineStatus();
            break;

        }

        case 'i_ect_new_call': {
            oSipSessionTransferCall = e.session;
            break;
        }

        case 'i_ao_request': {
            if (e.session == oSipSessionCall) {
                var iSipResponseCode = e.getSipResponseCode();
                if (iSipResponseCode == 180 || iSipResponseCode == 183) {
                    startRingbackTone();
                    // txtCallStatus.innerHTML = '<i>Remote ringing...</i>';
                }
            }
            break;
        }

        case 'm_early_media': {
            if (e.session == oSipSessionCall) {
                stopRingbackTone();
                stopRingTone();
                //  txtCallStatus.innerHTML = '<i>Early media started</i>';
            }
            break;
        }

        case 'm_local_hold_ok': {
            if (e.session == oSipSessionCall) {
                if (oSipSessionCall.bTransfering) {
                    oSipSessionCall.bTransfering = false;
                    // this.AVSession.TransferCall(this.transferUri);
                }
                btnHoldResume.value = 'Resume';
                btnHoldResume.disabled = false;
                // txtCallStatus.innerHTML = '<i>Call placed on hold</i>';
                oSipSessionCall.bHeld = true;
            }
            break;
        }
        case 'm_local_hold_nok': {
            if (e.session == oSipSessionCall) {
                oSipSessionCall.bTransfering = false;
                btnHoldResume.value = 'Hold';
                btnHoldResume.disabled = false;
                //   txtCallStatus.innerHTML = '<i>Failed to place remote party on hold</i>';
            }
            break;
        }
        case 'm_local_resume_ok': {
            if (e.session == oSipSessionCall) {
                oSipSessionCall.bTransfering = false;
                btnHoldResume.value = 'Hold';
                btnHoldResume.disabled = false;
                //  txtCallStatus.innerHTML = '<i>Call taken off hold</i>';
                oSipSessionCall.bHeld = false;

                if (SIPml.isWebRtc4AllSupported()) { // IE don't provide stream callback yet
                    uiVideoDisplayEvent(false, true);
                    uiVideoDisplayEvent(true, true);
                }
            }
            break;
        }
        case 'm_local_resume_nok': {
            if (e.session == oSipSessionCall) {
                oSipSessionCall.bTransfering = false;
                btnHoldResume.disabled = false;
                //  txtCallStatus.innerHTML = '<i>Failed to unhold call</i>';
            }
            break;
        }
        case 'm_remote_hold': {
            if (e.session == oSipSessionCall) {
                //  txtCallStatus.innerHTML = '<i>Placed on hold by remote party</i>';
            }
            break;
        }
        case 'm_remote_resume': {
            if (e.session == oSipSessionCall) {
                //  txtCallStatus.innerHTML = '<i>Taken off hold by remote party</i>';
            }
            break;
        }
        case 'm_bfcp_info': {
            if (e.session == oSipSessionCall) {
                // txtCallStatus.innerHTML = 'BFCP Info: <i>' + e.description
                +'</i>';
            }
            break;
        }

        case 'o_ect_trying': {
            if (e.session == oSipSessionCall) {
                //   txtCallStatus.innerHTML = '<i>Call transfer in progress...</i>';
            }
            break;
        }
        case 'o_ect_accepted': {
            if (e.session == oSipSessionCall) {
                txtCallStatus.innerHTML = '<i>Call transfer accepted</i>';
            }
            break;
        }
        case 'o_ect_completed':
        case 'i_ect_completed': {
            if (e.session == oSipSessionCall) {
                //  txtCallStatus.innerHTML = '<i>Call transfer completed</i>';
                btnTransfer.disabled = false;
                if (oSipSessionTransferCall) {
                    oSipSessionCall = oSipSessionTransferCall;
                }
                oSipSessionTransferCall = null;
            }
            break;
        }
        case 'o_ect_failed':
        case 'i_ect_failed': {
            if (e.session == oSipSessionCall) {
                //    txtCallStatus.innerHTML = '<i>Call transfer failed</i>';
                btnTransfer.disabled = false;
            }
            break;
        }
        case 'o_ect_notify':
        case 'i_ect_notify': {
            if (e.session == oSipSessionCall) {
                //  txtCallStatus.innerHTML = "<i>Call Transfer: <b>"
                +e.getSipResponseCode() + " " + e.description + "</b></i>";
                if (e.getSipResponseCode() >= 300) {
                    if (oSipSessionCall.bHeld) {
                        oSipSessionCall.resume();
                    }
                    btnTransfer.disabled = false;
                }
            }
            break;
        }
        case 'i_ect_requested': {
            if (e.session == oSipSessionCall) {
                var s_message = "Do you accept call transfer to ["
                        + e.getTransferDestinationFriendlyName() + "]?";//FIXME
                if (confirm(s_message)) {
                    // txtCallStatus.innerHTML = "<i>Call transfer in progress...</i>";
                    oSipSessionCall.acceptTransfer();
                    break;
                }
                oSipSessionCall.rejectTransfer();
            }
            break;
        }
        }
    }
    function uiOnConnectionEvent(b_connected, b_connecting) { 
    }

    function uiCallTerminated(s_description) {
       
    }
 
    // Mute or Unmute the call
    function sipToggleMute() {
            if(isEnabled == 0){
                 errorMessage.innerHTML = '<b>Connecting to server...</b>';
                 errorMessage.style.visibility = "visible";
                 return;
            }
            if (oSipSessionCall) {
                var i_ret;
                var bMute = !oSipSessionCall.bMute;
               
                //txtCallStatus.innerHTML = bMute ? '<i>Mute the call...</i>' : '<i>Unmute the call...</i>';
                i_ret = oSipSessionCall.mute('audio'/*could be 'video'*/, bMute);
                if (i_ret != 0) {
               //     txtCallStatus.innerHTML = '<i>Mute / Unmute failed</i>';
                    return;
                }
                 oSipSessionCall.bMute = bMute;
                 if(bMute){ 
                     document.getElementById('mute').src = '{!$Resource.unMutecall}';          
                } else{
                  document.getElementById('mute').src = '{!$Resource.mutecall}';
                }
    
               // btnMute.value = bMute ? "Unmute" : "Mute";
            }
   }
   
   
   function startTimer() {
    if (isTimer === false) {
            clock = setInterval("setLocalStorage()", 2000);
            isTimer = true;
        }
    }
    
    function setLocalStorage(){
        var currentTime = new Date().getTime();
        if (window.localStorage){
                    window.localStorage.setItem('org.jinya.online.active.status',currentTime);
        }
    
    }
    
    function callDirection(){
        console.log('Inside callDirection');
        switch(isEnabled){
        
                case 0:{
                errorMessage.innerHTML = '<b>Connecting to server...</b>';
                errorMessage.style.visibility = "visible";
                        break; 
                }
                case 1: {
                           sipHangUp();
                           break;
                            
                }
                case 2:{
                
                        sipCall("call-audio");
                        break;
                }
        
        }
    }
   
</script>

<apex:includeScript value="{!$Resource.SIPmlApi}" />
    </html>
    
    

</apex:page>