/*Code generated by ForceXtra.com */
public with sharing class AccountMulitiSelectorCtrl
{
    public List<SelectOption> leftOptLst{get;private set;}
    public List<SelectOption> rigtOptLst{get;private set;}
    public List<ActivityRefAccount__c> TodoRefAccount{get;set;}
    public Id currId{get;set;}
    public string accQueryKey{get;set;}
    // 右侧值
    public set<string> excNamesSet{get;set;}
    //private Event currEvent;
    public String backUrl{get;set;}
    // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
    public String callBack{get;set;}
    private boolean isProjectFlg; // プロジェックトフラグ
    // 2020/10/31 2.07.取引先の紐付け by zy END
    public void init()
    {
        // 2017/07/31 WGCH BEGIN
        //currId = handel.getId();
        // 2017/07/31 WGCH END
        //Id currId = '00Up00000051LOC';
        string strRelactionAccs = null;
        string strWhatId = null;
	    // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        isProjectFlg = false;
	    // 2020/10/31 2.07.取引先の紐付け by zy END
        // 2017/07/31 WGCH BEGIN
        Map<string, string> parMap = ApexPages.currentPage().getParameters();
        currId = parMap.get('id');
        // 2017/07/31 WGCH END
        backUrl = CommUtils.nullToBlank( parMap.get('retURL'));
        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        callBack = CommUtils.nullToBLank(parMap.get('callback'));
        // 2020/10/31 2.07.取引先の紐付け by zy END
        if(Schema.Task.sObjectType == currId.getSObjectType())
        {
            List<Task> tasks = [SELECT
                WhatId
            FROM
                Task
            WHERE
                Id = : currId];
            if(tasks.isEmpty())
            {
                throw new  CommException('Data Not Found!!!');
            }
            string taskWhatId = tasks[0].WhatId;
            if(taskWhatId != null)
            {
                string sObjectType = taskWhatId.substring(0, 3);
                if(Account.sObjectType.getDescribe().getKeyPrefix() == sObjectType)
                {
                    strWhatId = CommUtils.nullToBlank(tasks[0].WhatId);
                }
            }
        }
        else if(Schema.Event.sObjectType == currId.getSObjectType())
        {
            List<Event> events = [SELECT
                WhatId
            FROM
                Event
            WHERE
                Id = : currId];
            if(events.isEmpty())
            {
                throw new  CommException('Data Not Found!!!');
            }
            string eventsWhatId = events[0].WhatId;
            if(eventsWhatId != null)
            {
                string sObjectType = eventsWhatId.substring(0, 3);
                if(Account.sObjectType.getDescribe().getKeyPrefix() == sObjectType)
                {
                    strWhatId = CommUtils.nullToBlank(events[0].WhatId);
                }
            }
        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        } else if (Schema.ProjectDetail__c.sObjectType == currId.getSObjectType()) {
            List<ProjectDetail__c> events = [SELECT
                AccountRefs__c
		        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
                ,TaskId__c
                // 2020/10/31 2.07.取引先の紐付け by zy END
            FROM
                ProjectDetail__c
            WHERE
                Id = : currId];
            if(events.isEmpty())
            {
                throw new  CommException('Data Not Found!!!');
            }
            string eventsWhatId = events[0].AccountRefs__c;
            if(eventsWhatId != null)
            {
                string sObjectType = eventsWhatId.substring(0, 3);
                if(Account.sObjectType.getDescribe().getKeyPrefix() == sObjectType)
                {
                    strWhatId = CommUtils.nullToBlank(events[0].AccountRefs__c).split(',')[0];
                }
            }
	    // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
            isProjectFlg = true;
	    // 2020/10/31 2.07.取引先の紐付け by zy END
        }
        // 2020/10/31 2.07.取引先の紐付け by zy END
        string strcurrId = currId;
        rigtOptLst = new  List<SelectOption>();
        excNamesSet = new  set<string>();
        if(!CommUtils.isBlank(strWhatId))
        {
            //List<ActivityRefAccount__c> TodoRefAccount = [select id,name,RelationIdRefName__c,RelationIdRefCal__c,AccountMainRef__c,AccountSubRef__c,AccountSubRef__r.name,RelationIdRef__c from ActivityRefAccount__c where AccountMainRef__c =:strWhatId and RelationIdRef__c =:strcurrId];
            // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
	    /*
            List<ActivityRefAccount__c> TodoRefAccount = [SELECT
                id, 
                name, 
                RelationIdRefName__c, 
                RelationIdRefCal__c, 
                AccountMainRef__c, 
                AccountSubRef__c, 
                AccountSubRef__r.name, 
                RelationIdRef__c
            FROM
                ActivityRefAccount__c
            WHERE
                RelationIdRef__c = : strcurrId Order By Name];
            */
            String SQL = ' SELECT    id,     name,   RelationIdRefName__c,   RelationIdRefCal__c,    AccountMainRef__c,  AccountSubRef__c,   AccountSubRef__r.name,  RelationIdRef__c FROM ActivityRefAccount__c ';
            SQL += isProjectFlg ? 'WHERE   ProjectDetailRef__c = : strcurrId ' : 'WHERE   RelationIdRef__c = : strcurrId ';
            SQL += 'Order By Name';
            List<ActivityRefAccount__c> TodoRefAccount = DataBase.query(SQL);
            // 2020/10/31 2.07.取引先の紐付け by zy END
	        if(TodoRefAccount.isEmpty())
            {
                string accountval = 'select Id,Name from Account where Id =:strWhatId';
                List<Account> accountWhatId = DataBase.query(accountval);
                rigtOptLst.add(new SelectOption(accountWhatId[0].Id, accountWhatId[0].name));
                excNamesSet.add(accountWhatId[0].name);
            }
            else
            {
                for(ActivityRefAccount__c todoref: TodoRefAccount)
                {
                    rigtOptLst.add(new  SelectOption(todoref.AccountSubRef__c, todoref.AccountSubRef__r.name));
                    excNamesSet.add(todoref.AccountSubRef__r.name);
                }
            }
        }
        queryDefAccount(excNamesSet, null);
    }
    // 检索去重右侧值条件
    private static final string queryWhereStr = ' Where name not in :excNamesSet ';
    // Defaultの取引先情報を格納する
    // 最近参照した取引先情報１００件を画面にデフォルト表示を行う[既に右側に格納している取引先は表示対象外になる]
    private void queryDefAccount(set<string> existAccNms, string findkey)
    {
        leftOptLst = new  List<SelectOption>();
        if(CommUtils.isBlank(findkey))
        {
            // 初期値
            List<account> defAccLst = [SELECT
                id, 
                name, 
                Phone
            FROM
                account
            WHERE
                name NOT in: existAccNms limit 200];
            for(Account acc: defAccLst)
            {
                leftOptLst.add(new  SelectOption(acc.Id, acc.Name));
            }
        }
        else
        {
            // 检索值
            // 去重右侧值检索
            string accountStr = 'FIND :findkey IN ALL FIELDS RETURNING Account(Id, Name' + queryWhereStr + ')';
            List<List<Sobject>> rsLst = Search.query(accountStr);
            list<Account> wkProductLst = (List<Account>)rsLst[0];
            for(Account acc: wkProductLst)
            {
                leftOptLst.add(new  SelectOption(acc.Id, acc.Name));
            }
        }
    }
    // 检索条件值
    public void nameSearch()
    {
        // 2017/08/01 检索条件值大于等于2或者等于0 zyz BEGIN
        Integer searchNMLen = accQueryKey.length();
        if(searchNMLen >= 2 || searchNMLen == 0)
        {
            set<string> rightOpsSet = new  set<string>();
            for(SelectOption opt: rigtOptLst)
            {
                rightOpsSet.add(opt.getLabel());
            }
            queryDefAccount(rightOpsSet, accQueryKey);
        }
        else
        {
            ApexPages.addMessage(new  ApexPages.Message(ApexPages.Severity.ERROR, '2文字以上を指定する必要があります。'));
            queryDefAccount(null, null);
        }
        // 2017/08/01 检索条件值大于等于2或者等于0 zyz END
    }
    // 画面から選択した取引先情報を保存する
    @remoteAction
    public static void saveSelectAccounts(List<string> accNms, Id currId, List<id> accIds)
    {
        //INSERT対象データ
        List<ActivityRefAccount__c> insLst = new List<ActivityRefAccount__c>();
        // TASK/EVENT更新対象データ
        Sobject updTarget = null;
        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        String projectDetailId = null;
        ProjectDetail__c pd = null;
        if(Schema.ProjectDetail__c.sObjectType == currId.getSObjectType())
        {
            List<ProjectDetail__c> events = [SELECT 
                Title__c, TaskId__c,
                AccountRefs__c
            FROM
                ProjectDetail__c
            WHERE
                Id = : currId];
            if(events.isEmpty())
            {
                throw new  CommException('Data Not Found!!!');
            }
            String eventId = CommUtils.nullToBlank(events[0].TaskId__c);
            // 2020/10/31 8541 bug fixed by zy BEGIN
            if (CommUtils.isBlank(eventId)) updTarget = events[0];
            // 2020/10/31 8541 bug fixed by zy END
            projectDetailId = events[0].id;
            if(accIds != null && accIds.size() > 0)
            {
                if (CommUtils.isBlank(eventId)) {
                    for(id accId: accIds)
                    {
                        ActivityRefAccount__c todoRefAccounts = new  ActivityRefAccount__c();
                        todoRefAccounts.AccountMainRef__c = accIds[0];
                        todoRefAccounts.AccountSubRef__c = accId;
                        // todoRefAccounts.RelationIdRef__c = currId;
                        todoRefAccounts.ProjectDetailRef__c = projectDetailId;
                        todoRefAccounts.RelationIdRefName__c = events[0].Title__c;    
                        insLst.add(todoRefAccounts);
                    }
                    // タスクの関連先をリセットする
                    updTarget.put('AccountRefs__c',String.join(accIds,',')); 
                }
            } else if (CommUtils.isBlank(eventId)) updTarget.put('AccountRefs__c',null);
            if (!CommUtils.isBlank(eventId)) {
                events[0].AccountRefs__c = accIds != null && accIds.size() > 0 ? String.join(accIds,',') : null;
                update events[0];
                currId = eventId;
            }
        }
        // 2020/10/31 2.07.取引先の紐付け by zy END
        // データ連動処理
        if(Schema.Task.sObjectType == currId.getSObjectType())
        {
            List<Task> tasks = [SELECT
                WhatId, 
                Subject, 
                RelAccountCnt__c
                // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
                ,ProjectFlag__c
                // 2020/10/31 2.07.取引先の紐付け by zy END
            FROM
                Task
            WHERE
                Id = : currId limit 1];
            if(tasks.isEmpty())
            {
                throw new  CommException('Data Not Found!!!');
            }
            updTarget = tasks[0];
            // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
            if (tasks[0].ProjectFlag__c) {
                List<ProjectDetail__c> pds = [select id from ProjectDetail__c where TaskId__c = :currId];
                if (!pds.isEmpty()) pd = pds[0];
            }
            // 2020/10/31 2.07.取引先の紐付け by zy END
            if(accIds != null && accIds.size() > 0)
            {
                for(id accId: accIds)
                {
                    ActivityRefAccount__c todoRefAccounts = new  ActivityRefAccount__c();
                    todoRefAccounts.AccountMainRef__c = accIds[0];
                    todoRefAccounts.AccountSubRef__c = accId;
                    todoRefAccounts.RelationIdRef__c = currId;
                    todoRefAccounts.RelationIdRefName__c = tasks[0].Subject;    
                    // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
                    if (pd != null) todoRefAccounts.ProjectDetailRef__c = pd.id;    
                    else if (!CommUtils.isBLank(projectDetailId))  todoRefAccounts.projectDetailRef__c = projectDetailId;
                    // 2020/10/31 2.07.取引先の紐付け by zy END
                    insLst.add(todoRefAccounts);
                }
                // タスクの関連先をリセットする
                updTarget.put('WhatId',accIds[0]); 
 
            } else updTarget.put('WhatId',null);
            updTarget.put('RelAccountCnt__c',insLst.size());
            // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
            if (pd != null) pd.AccountRefs__c = accIds != null && accIds.size() > 0 ? String.join(accIds,',') : null;
            // 2020/10/31 2.07.取引先の紐付け by zy END
        }
        else if(Schema.Event.sObjectType == currId.getSObjectType())
        {
            List<Event> events = [SELECT
                WhatId, 
                Subject, 
                RelAccountCnt__c
                // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
                ,ProjectFlag__c
                // 2020/10/31 2.07.取引先の紐付け by zy END
            FROM
                Event
            WHERE
                Id = : currId];
            if(events.isEmpty())
            {
                throw new  CommException('Data Not Found!!!');
            }
            // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
            if (events[0].ProjectFlag__c) {
                List<ProjectDetail__c> pds = [select id from ProjectDetail__c where TaskId__c = :currId];
                if (!pds.isEmpty()) pd = pds[0];
            }
            // 2020/10/31 2.07.取引先の紐付け by zy END
            updTarget = events[0];
            if(accIds != null && accIds.size() > 0)
            {
                for(id accId: accIds)
                {
                    ActivityRefAccount__c todoRefAccounts = new  ActivityRefAccount__c();
                    todoRefAccounts.AccountMainRef__c = accIds[0];
                    todoRefAccounts.AccountSubRef__c = accId;
                    todoRefAccounts.RelationIdRef__c = currId;
                    todoRefAccounts.RelationIdRefName__c = events[0].Subject;    
                    // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
                    if (pd != null) todoRefAccounts.ProjectDetailRef__c = pd.id;   
                    else if (!CommUtils.isBLank(projectDetailId))  todoRefAccounts.ProjectDetailRef__c = projectDetailId;
                    // 2020/10/31 2.07.取引先の紐付け by zy END
                    insLst.add(todoRefAccounts);
                }
                // タスクの関連先をリセットする
                updTarget.put('WhatId',accIds[0]); 
                
            } else updTarget.put('WhatId',null);
            updTarget.put('RelAccountCnt__c',insLst.size());
            // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
            if (pd != null) pd.AccountRefs__c = accIds != null && accIds.size() > 0 ? String.join(accIds,',') : null;
        }
        // 2020/10/31 2.07.取引先の紐付け by zy END
        // 既存設定子関連情報を一括削除を行う
        delete [SELECT id FROM ActivityRefAccount__c WHERE RelationIdRef__c = : currId];
        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        if (!CommUtils.isBlank(projectDetailId)) delete [SELECT id FROM ActivityRefAccount__c WHERE ProjectDetailRef__c = : projectDetailId];
        // 2020/10/31 2.07.取引先の紐付け by zy END
        if (!insLst.isEmpty()) insert insLst;
        if (updTarget != null) update updTarget;
        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        if (pd != null) update pd;
        // 2020/10/31 2.07.取引先の紐付け by zy END
    }
    // 活動・TODO連動トリガー処理
    public void updRelationAccount(Sobject[] newList, Sobject[] oldList, CommConst.TriggerMethod action)
    {
        // 2019/09/15 Security Check BY zyz BEGIN
        List<String> chkFieldsLst = new List<String>{'relationidrefname__c','accountsubref__c','accountmainref__c'};
        Map<String,Schema.SObjectField> mm = Schema.SObjectType.ActivityRefAccount__c.fields.getMap();
        if (!CommSecurityUtils.isCanUpdateable(chkFieldsLst, mm)) {
        	return ;
        }
        if (!CommSecurityUtils.isDeleteable(ActivityRefAccount__c.getSObjectType())) {
        	return;
        }
        // 2019/09/15 Security Check BY zyz END
        // 関連先の取込先
        string accPrefix = Account.sObjectType.getDescribe().getKeyPrefix();
        List<ActivityRefAccount__c> insLst = new  list<ActivityRefAccount__c>();
        Id firstRsId = (newList != null ? (Id)newList[0].get('Id') : (Id)oldList[0].get('Id'));
        // 削除
        Set<Id> delIdSet = new  Set<Id>();
        // EVENT/TASKのID→活動のタイトル名
        map<id, string> titleUpdMap = new  Map<id, string>();
        // EVENT/TASKのID→関連の取込先ID(親)
        map<id, string> relAccUpdMap = new  Map<id, string>();
        // 関連先を変更される場合、変更後の関連先は取込先、変更前の取込先以外の場合、関連取込先明細情報は自動作成する・しないチェック用MAP
        // 活動・TODOのID,新規自動作成の関連情報
        map<id, List<ActivityRefAccount__c>> newRelAccsMap = new map<Id, List<ActivityRefAccount__c>>();
        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        Set<String> projectTaskSet = new SEt<String>();
        // 2020/10/31 2.07.取引先の紐付け by zy END
        // 新規の場合、関連データの新規登録
        if(action == CommConst.TriggerMethod.IsInsert)
        {
            for(Sobject s: newList)
            {
                string whatId = CommUtils.nullToBlank(s.get('WhatId'));
                string currId = CommUtils.nullToBlank(s.get('Id'));
                string title = CommUtils.nullToBlank(s.get('Subject'));
                if(CommUtils.isBlank(whatId)) continue;
                if(!whatId.startsWith(accPrefix)) continue; 
                // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
                boolean projectFlg = Boolean.valueOf(CommUtils.nullToBlank(s.get('ProjectFlag__c')));
                if (projectFlg) projectTaskSet.add(currId);
                // 新規データを登録する
                // 标准画面設定チェック
                boolean customEventFlg = boolean.valueOf(CommUtils.nullToBlank(s.get('CustomEventFlag__c')));
                if (!customEventFlg)
                insLst.add(new  ActivityRefAccount__c(AccountMainRef__c = whatId, AccountSubRef__c = whatId, RelationIdRef__c = currId, RelationIdRefName__c = title));
                // 2020/10/31 2.07.取引先の紐付け by zy END
            }
        }
        else if(action == CommConst.TriggerMethod.IsUpdate)
        {
            Integer len = newList.size();
            for(integer i = 0; i < len; i++)
            {
                Sobject nw = newList[i];
                Sobject od = oldList[i];
                string currId = CommUtils.nullToBlank(nw.get('Id'));
                string nwWhatId = CommUtils.nullToBlank(nw.get('WhatId'));
                string nwTitle = CommUtils.nullToBlank(nw.get('Subject'));
                string odWhatId = CommUtils.nullToBlank(od.get('WhatId'));
                string odTitle = CommUtils.nullToBlank(od.get('Subject'));
                // タイトル　かつ　関連取込先変更なし場合、処理対象外
                if(nwWhatId == odWhatId && nwTitle == odTitle) { continue;}// 関連先は取込先以外の場合、処理対象外
                if(!nwWhatId.startsWith(accPrefix) && !odWhatId.startsWith(accPrefix)) { continue; }
                // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
                boolean projectFlg = Boolean.valueOf(CommUtils.nullToBlank(nw.get('ProjectFlag__c')));
                if (projectFlg) projectTaskSet.add(currId);
                // 2020/10/31 2.07.取引先の紐付け by zy END
                if(nwWhatId != odWhatId)
                {
                    // 変更後の関連先は取込先以外の場合、関連データを削除する
                    if(!nwWhatId.startsWith(accPrefix))
                    {
                        // 変更前に登録データを削除する
                        delIdSet.add(currId);
                    }
                    // 変更前の関連先は取込先以外の場合、関連データを削除する
                    else if(!odWhatId.startsWith(accPrefix))
                    {
                        // 新規登録を行う
                        // 新規データを登録する 
                        ActivityRefAccount__c newItem = (new ActivityRefAccount__c(AccountMainRef__c = nwWhatId, AccountSubRef__c = nwWhatId, RelationIdRef__c = currId, RelationIdRefName__c = nwTitle));
                        if (!newRelAccsMap.containsKey(currId)) newRelAccsMap.put(currId, new List<ActivityRefAccount__c>());
                        newRelAccsMap.get(currId).add(newItem);
                    }
                    // 変更前の変更後の関連先は取込先の場合
                    else
                    {
                        // 関連取込先（親）とタイトルを更新を行う
                        titleUpdMap.put(currId, nwTitle);
                        relAccUpdMap.put(currId, nwWhatId);
                    }
                }
                // 件名のみ変更の場合
                else if(nwTitle != odTitle)
                {
                    //relAccUpdMap.put(currId, nwWhatId);
                    titleUpdMap.put(currId, nwTitle);
                }
            }
        }
        else if(action == CommConst.TriggerMethod.IsDelete)
        {
            for(Sobject s: oldList)
            {
                string whatId = CommUtils.nullToBlank(s.get('WhatId'));
                string currId = CommUtils.nullToBlank(s.get('Id'));
                if(CommUtils.isBlank(whatId)) continue;
                if(!whatId.startsWith(accPrefix)) continue;
                // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
                boolean projectFlg = Boolean.valueOf(CommUtils.nullToBlank(s.get('ProjectFlag__c')));
                if (projectFlg) projectTaskSet.add(currId);
                // 2020/10/31 2.07.取引先の紐付け by zy END
                // 既存データ削除する
                delIdSet.add(currId);
            }
        }
        // 処理対象がない場合、処理中止
        if (insLst.isEmpty() && delIdSet.isEmpty() && titleUpdMap.isEmpty() && newRelAccsMap.isEmpty()) return;
        
        List<ActivityRefAccount__c> updLst = new  List<ActivityRefAccount__c>();
        List<ActivityRefAccount__c> delList = new List<ActivityRefAccount__c>();
        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        Map<String,ProjectDetail__c> projectMap = new Map<String,ProjectDetail__c>();
        for (ProjectDetail__c p : [select id,TaskId__c,AccountRefs__c from ProjectDetail__c where TaskId__c in :projectTaskSet]) {
            projectMap.put(p.TaskId__c,p);
        }
        // 2020/10/31 2.07.取引先の紐付け by zy END
        if(!titleUpdMap.isEmpty() || !newRelAccsMap.isEmpty())
        {
            set<Id> queryIdSet = new set<Id>();
            queryIdSet.addAll(titleUpdMap.keySet());
            queryIdSet.addAll(newRelAccsMap.keySet());
            // 関連設定からタイトル名更新を行う
            List<ActivityRefAccount__c> refAccs = [SELECT
                RelationIdRef__c, 
                RelationIdRefName__c, 
                AccountMainRef__c, 
                AccountSubRef__c
                // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
                ,ProjectDetailRef__c
                // 2020/10/31 2.07.取引先の紐付け by zy END
            FROM
                ActivityRefAccount__c
            WHERE
                RelationIdRef__c in: queryIdSet
                Order By RelationIdRef__c, Name];
            // FIRSTデータの場合
            Map<Id, Boolean> firstFlgMap = new Map<Id, Boolean>();
            // 関連取込先情報重複チェック用
            Set<String> dupFilterKeySet = new Set<String>();
//for(ActivityRefAccount__c ref: refAccs){
//System.debug(loggingLevel.info, ref);   
//}
            for(ActivityRefAccount__c ref: refAccs)
            {
                // 関連のTODO・活動ID
                Id relId = ref.RelationIdRef__c;
                if (newRelAccsMap.containsKey(relId)) {
                    // 該当活動関連データは既に存在場合、該当活動の自動作成データは対象外になる
                    newRelAccsMap.remove(relId);
                }
                // 関連のTODO・活動関連の取込先の明細データのFIRSTDATA判断用
                if (!firstFlgMap.containsKey(relId)) {
                    firstFlgMap.put(relId, true);
                } else firstFlgMap.put(relId, false);
                //取引先先変更あり場合
                if (relAccUpdMap.containsKey(relId)) {
                    // NEW取込先ID（親）
                    Id newParAccId = relAccUpdMap.get(relId);
                    // 親IDをリセットする
                    ref.AccountMainRef__c = newParAccId;
                    // 該当活動はFIRSTデータの場合、子取引先のIDは新取込先IDと一致しなかった場合、更新を行う
                    if (firstFlgMap.get(relId)) ref.AccountSubRef__c = newParAccId;
                    // キー重複チェックキーを作成する
                    String filterKey = relId + '_' + newParAccId + '_' + ref.AccountSubRef__c;
                    // 該当キーを重複の場合
                    if (dupFilterKeySet.contains(filterKey)) {
                        delList.add(ref);
                        continue;
                    }
                    dupFilterKeySet.add(filterKey);
                }
                // タイトル変更処理
                if(titleUpdMap.containsKey(relId))
                {
                    ref.RelationIdRefName__c = titleUpdMap.get(relId);
                    updLst.add(ref);
                }
            }
        }
        if (!newRelAccsMap.isEmpty()) {
            for (List<ActivityRefAccount__c> relAccs : newRelAccsMap.values()) {
                insLst.addAll(relAccs);
            }
        }
        if(!updLst.isEmpty()) update updLst;
        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        if(!insLst.isEmpty()) {
            for (ActivityRefAccount__c acc : insLst) {
                if (projectMap.containsKey(acc.RelationIdRef__c))
                    acc.projectDetailRef__c = projectMap.get(acc.RelationIdRef__c).id;
            }
            insert insLst;
        }
        // 2020/10/31 2.07.取引先の紐付け by zy END
        if(!delList.isEmpty())  delete delList;
        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        if(!delIdSet.isEmpty()) {
            // プロジェクト作成行動
            if (projectMap.isEmpty()) delete [select id from ActivityRefAccount__c where RelationIdRef__c in :delIdSet];
            else {
                // 削除タスクの関連先
                List<ActivityRefAccount__c> delAccs = new List<ActivityRefAccount__c>();
                // 更新タスクの関連先
                List<ActivityRefAccount__c> updAccs = new List<ActivityRefAccount__c>();
                // タスクの関連先リスト
                for (ActivityRefAccount__c acc : [select id,RelationIdRef__c from ActivityRefAccount__c where RelationIdRef__c in :delIdSet]) {
                    // プロジェクト関連なし
                    if (!projectMap.containsKey(acc.RelationIdRef__c)) delAccs.add(acc);
                    // プロジェクト関連、設定値NULL設定
                    else {
                        acc.RelationIdRef__c = null;
                        updAccs.add(acc);
                    }
                }   
                if (!delAccs.isEmpty()) delete delAccs;
                if (!updAccs.isEmpty()) update updAccs;
            }
        }
        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        // 子データを個別削除が必要の場合、TODO_行動連動更新処理が必要です
        // 関連タスクの取引先数をチェック、更新をを行う
        Set<Id> updCntTargetIds = new Set<Id>();
        Boolean isTaskType = (Schema.Task.sObjectType == firstRsId.getSObjectType()), isEvntType = (Schema.Event.sObjectType == firstRsId.getSObjectType());
        // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
        Map<String,Set<String>> taskActivtyMap = new Map<String,Set<String>>();
        for (ActivityRefAccount__c upd : updLst) {
            if (!taskActivtyMap.containsKey(upd.RelationIdRef__c)) taskActivtyMap.put(upd.RelationIdRef__c,new Set<String>());
            taskActivtyMap.get(upd.RelationIdRef__c).add(upd.AccountSubRef__c);
            updCntTargetIds.add(upd.RelationIdRef__c);
        }
        for (ActivityRefAccount__c ins : insLst) {
            if (!taskActivtyMap.containsKey(ins.RelationIdRef__c)) taskActivtyMap.put(ins.RelationIdRef__c,new Set<String>());
            taskActivtyMap.get(ins.RelationIdRef__c).add(ins.AccountSubRef__c);
            updCntTargetIds.add(ins.RelationIdRef__c);
        }
	// 2020/10/31 2.07.取引先の紐付け by zy END
        for (ActivityRefAccount__c del : delList) updCntTargetIds.add(del.RelationIdRef__c);
        if (!delIdSet.isEmpty()) updCntTargetIds.addAll(delIdSet);
        
//System.debug(loggingLevel.info,'updCntTargetIds='+updCntTargetIds);
        if (!updCntTargetIds.isEmpty()) {
            AggregateResult[] groupedResults = [select count(id) cnt, RelationIdRef__c relId from ActivityRefAccount__c Where RelationIdRef__c in: updCntTargetIds Group by RelationIdRef__c];
            map<Id,Integer> sumInfoMap = new map<Id, Integer>();
            for (AggregateResult avgRs : groupedResults) {
                Id relId = (ID)(avgRs.get('relId'));
                sumInfoMap.put(relId, CommUtils.nullToIntZero(avgRs.get('cnt')));
            }
            List<Sobject> updCntTargetLst = new List<Sobject>();
            if (isEvntType) {
                List<Event> updCntLst = [select id, RelAccountCnt__c from Event where id in :updCntTargetIds];
                for (Event evt : updCntLst) {
                    Integer rsCnt = CommUtils.nullToIntZero(sumInfoMap.get(evt.Id));
                    if (evt.RelAccountCnt__c != rsCnt) {
                        evt.RelAccountCnt__c = rsCnt;
                        updCntTargetLst.add(evt);
                    }
                }
            } else if (isTaskType) {
                List<Task> updCntLst = [select id, RelAccountCnt__c from Task where id in :updCntTargetIds];
                for (Task evt : updCntLst) {
                    Integer rsCnt = CommUtils.nullToIntZero(sumInfoMap.get(evt.Id));
                    if (evt.RelAccountCnt__c != rsCnt) {
                        evt.RelAccountCnt__c = rsCnt;
                        updCntTargetLst.add(evt);
                    }
                }
            }
//System.debug(loggingLevel.info,'updCntTargetLst='+updCntTargetLst);
			// 2018/06/19 タスク更新不可の不具合改修 BEGIN
            //if (!updCntTargetLst.isEmpty()) update updCntTargetLst;
            if (!updCntTargetLst.isEmpty()) StaffTaskHelp.updateTasks(updCntTargetLst);
            // 2018/06/19 タスク更新不可の不具合改修 END
            // 2020/10/31 2.07.取引先の紐付け by zy BEGIN
    	    if (!taskActivtyMap.isEmpty()) {
                List<ProjectDetail__c> pds = new List<ProjectDetail__c>();
                for (String taskId : taskActivtyMap.keySet()){
                    List<String> taskIds = new List<String>(taskActivtyMap.get(taskId));
                    if (projectMap.containsKey(taskId)) {
                        ProjectDetail__c pd = projectMap.get(taskId);
                        pd.AccountRefs__c = String.join(taskIds,',');
                        pds.add(pd);
                    }
                }
                if (!pds.isEmpty()) update pds;
            }
    	    // 2020/10/31 2.07.取引先の紐付け by zy END
        }
    }
}